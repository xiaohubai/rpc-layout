// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.3.1

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationDictGet = "/api.dict.v1.Dict/Get"

type DictHTTPServer interface {
	Get(context.Context, *DictRequest) (*DictResponse, error)
}

func RegisterDictHTTPServer(s *http.Server, srv DictHTTPServer) {
	r := s.Route("/")
	r.POST("/get/dict", _Dict_Get0_HTTP_Handler(srv))
}

func _Dict_Get0_HTTP_Handler(srv DictHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DictRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDictGet)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Get(ctx, req.(*DictRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DictResponse)
		return ctx.Result(200, reply)
	}
}

type DictHTTPClient interface {
	Get(ctx context.Context, req *DictRequest, opts ...http.CallOption) (rsp *DictResponse, err error)
}

type DictHTTPClientImpl struct {
	cc *http.Client
}

func NewDictHTTPClient(client *http.Client) DictHTTPClient {
	return &DictHTTPClientImpl{client}
}

func (c *DictHTTPClientImpl) Get(ctx context.Context, in *DictRequest, opts ...http.CallOption) (*DictResponse, error) {
	var out DictResponse
	pattern := "/get/dict"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationDictGet))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
